Kooperatif Yönetim Sistemi için Veritabanı Mimarisi RaporuGirişBu rapor, Kooperatif Yönetim Sistemi için kapsamlı bir veritabanı mimarisi sunmak amacıyla hazırlanmıştır. Raporun temel hedefi, sağlanan Koopbis kullanıcı kılavuzu 1 ve belirtilen teknik gereksinimler doğrultusunda, modern, ölçeklenebilir ve güvenli bir veritabanı şeması ortaya koymaktır. Tasarım, doğrudan üretime alınabilecek nitelikte olup, PostgreSQL ortamı için eksiksiz bir Veri Tanımlama Dili (DDL) betiği ve dbdiagram.io formatında görsel bir şema tanımı içermektedir.Mimarinin temelini oluşturan tasarım ilkeleri şunlardır:Veri Bütünlüğü ve Normalizasyon: Veri tekrarını ortadan kaldırmak, veri tutarlılığını en üst düzeye çıkarmak ve anomali risklerini en aza indirmek için şema, katı bir şekilde Üçüncü Normal Form (3NF) kurallarına uygun olarak tasarlanmıştır.Ölçeklenebilirlik: Sistem, artan sayıda kooperatif, üye ve işlem hacmini sorunsuz bir şekilde yönetebilecek şekilde yapılandırılmıştır. Özellikle kooperatifler arası hiyerarşik ilişkiler ve üyelik yaşam döngüleri gibi karmaşık yapılar, gelecekteki büyümeyi destekleyecek esneklikte modellenmiştir.Güvenlik Odaklı Tasarım: Kullanıcı tarafından talep edilen en kritik gereksinimlerden biri olan kooperatif bazlı yetkilendirme, mimarinin merkezine yerleştirilmiştir. Şema, bir kullanıcının farklı kooperatiflerde farklı rollere sahip olabilmesini sağlayacak ve bu bilgilerin token tabanlı (örneğin, JWT) bir kimlik doğrulama sisteminin "claim" alanlarına kolayca entegre edilebilmesini mümkün kılacak şekilde tasarlanmıştır. Bu yaklaşım, uygulama katmanında hassas ve bağlama duyarlı (context-aware) erişim kontrolü mekanizmalarının kurulmasını doğrudan destekler.Bu rapor, sistemin temel iş varlıklarının modellenmesinden başlayarak, karmaşık yetkilendirme yapısının çözümüne kadar tüm veritabanı katmanını detaylı bir şekilde ele almaktadır. Sunulan şemalar, hem işlevsel gereksinimleri eksiksiz karşılamayı hem de uzun vadeli bakım ve geliştirme süreçlerinde sağlam bir temel oluşturmayı hedeflemektedir.Bölüm 1: Temel İş Varlıkları ŞemasıBu bölümde, Koopbis kullanıcı kılavuzunda 1 belirtilen ana işlevsellikleri modelleyen veritabanı tabloları ve ilişkileri detaylandırılmaktadır. Tasarım, her bir iş varlığını mantıksal olarak ayrıştırarak veri bütünlüğünü ve esnekliği en üst düzeye çıkarmayı amaçlamaktadır.1.1. cooperatives Merkezi: Ana Varlığın ModellenmesiSistemin tüm yapısı "Kooperatif" kavramı etrafında şekillenmektedir. Kooperatifler, sistemdeki diğer tüm verilerin bağlandığı merkezi birimlerdir. Kılavuzda belirtilen Unvan, Mersis No, Dosya No, Kuruluş Tescil Tarihi gibi temel bilgiler bu varlığın temel niteliklerini oluşturur.1 Kullanıcının "kooperatifler birleşip kooperatif kurabilir" şeklindeki özel talebi, bu varlığın tasarımında kritik bir rol oynamıştır.Bu gereksinimleri karşılamak üzere aşağıdaki tablo yapıları önerilmektedir:Önerilen Tablo: cooperativesBu tablo, sistemdeki her bir kooperatifi temsil eden ana tablodur.id (PK, UUID): Benzersiz birincil anahtar.name (VARCHAR): Kooperatifin tam unvanı.mersis_no (VARCHAR, UNIQUE): MERSİS numarası, benzersiz olmalıdır.file_no (VARCHAR): Bakanlık tarafından verilen dosya numarası.registration_date (DATE): Ticaret siciline tescil tarihi.establishment_permit_date (DATE): Kuruluş izin tarihi.legal_status (VARCHAR): Hukuki durumu (örneğin, 'Faal', 'Tasfiye Halinde').cooperative_type_id (FK, UUID): cooperative_types tablosuna referans.parent_cooperative_id (FK, UUID): Aynı tabloya (kendine) referans.address_line1 (VARCHAR): Adres bilgileri.city (VARCHAR): Merkez il.postal_code (VARCHAR): Posta kodu.created_at (TIMESTAMPTZ): Kayıt oluşturma zamanı.updated_at (TIMESTAMPTZ): Kayıt güncelleme zamanı.Hiyerarşik yapının modellenmesi, bu tablonun en önemli tasarım kararlarından biridir. parent_cooperative_id sütunu, bir kooperatifin başka bir kooperatife (örneğin bir üst birlik veya federasyon) bağlanmasını sağlar. Bu kendine referans veren (self-referencing) yabancı anahtar, ilişkisel veritabanlarında ağaç benzeri yapıları modellemek için standart ve verimli bir yöntemdir. Bu sayede, teorik olarak sonsuz derinlikte bir kooperatif hiyerarşisi kurulabilir.Değerli Tablo: cooperative_typesBu tablo, kooperatif türlerini standartlaştırmak için kullanılan bir arama (lookup) tablosudur.id (PK, UUID): Benzersiz birincil anahtar.name (VARCHAR, UNIQUE): Kooperatif türünün adı (örneğin, 'Üretim ve Pazarlama Kooperatifi', 'Yapı Kooperatifi').Kooperatif Türü alanının 1 kategorik bir değer olduğu açıktır. Bu değeri cooperatives tablosunda metin olarak saklamak, yazım hatalarına yol açabilir ve veri tutarlılığını bozar. Ayrı bir arama tablosu kullanmak, veri bütünlüğünü garanti eder, kullanıcı arayüzündeki seçim listelerinin (dropdown) yönetimini kolaylaştırır ve gelecekte yeni kooperatif türleri eklemeyi şema değişikliği gerektirmeksizin mümkün kılar.1.2. Ortak ve Üyelik Yaşam Döngüsü Yönetimi"Ortaklar" bölümü 1, sistemin en karmaşık iş mantığını içermektedir. Bu bölüm, "Gerçek Kişi" ve "Tüzel Kişi" ortaklar arasında ayrım yapar. Daha da önemlisi, "Ortaklık Durumu" için karmaşık bir durum makinesi (state machine) tanımlar. "Ortaklıktan İhraç Edildi" veya "Ortaklığı Devretti" gibi durumlar, kendilerine özgü çok sayıda ek veri alanının doldurulmasını gerektirir.1Bu karmaşıklığı doğru bir şekilde modellemek için, bir ortağın kimliği (kim olduğu) ile bir kooperatifteki üyeliği (kooperatifle olan ilişkisi) arasındaki ayrımı yapmak esastır. Bir kişi veya tüzel kişilik, herhangi bir üyeliği olmaksızın sistemde var olabilir. Ayrıca, üyelik durumu değişiklikleri basit bir "güncelleme" işleminden çok daha fazlasıdır; her biri kendi bağlamı ve verileriyle kaydedilmesi gereken birer iş olayıdır (business event). Bu nedenle, bu modül için "Event Sourcing" (Olay Kaynaklama) deseninden ilham alan bir yaklaşım benimsenmiştir.Önerilen Tablolar:parties: Üye olabilecek herhangi bir varlığı temsil eden soyut bir temel tablodur.id (PK, UUID)party_type (VARCHAR): Bu kaydın türünü belirten bir ayırıcı (discriminator) sütun ('PERSON' veya 'LEGAL_ENTITY').persons: Gerçek kişilerin detaylarını saklar ve parties tablosuna bağlanır. "Gerçek Kişi Ortak Ekle" ekranındaki alanları modeller.1id (PK, FK, UUID): parties tablosundaki id'ye referans.first_name (VARCHAR)last_name (VARCHAR)tckn (VARCHAR, UNIQUE): Türkiye Cumhuriyeti Kimlik Numarası.date_of_birth (DATE)phone_number (VARCHAR)email (VARCHAR)legal_entities: Kurumların (şirketler, dernekler ve diğer kooperatifler dahil) detaylarını saklar ve parties tablosuna bağlanır. "Tüzel Kişi Ortak Ekle" ekranındaki alanları modeller.1id (PK, FK, UUID): parties tablosundaki id'ye referans.name (VARCHAR): Kurumun resmi unvanı.tax_id (VARCHAR, UNIQUE): Vergi Kimlik Numarası.mersis_no (VARCHAR, UNIQUE): MERSİS Numarası.is_cooperative (BOOLEAN): Bu tüzel kişiliğin aynı zamanda cooperatives tablosunda bir kayıt olup olmadığını belirtir.memberships: Bir party'yi bir cooperative'e bağlayan kritik bağlantı tablosudur. Üyeliğin kendisine ait nitelikleri içerir.id (PK, UUID)party_id (FK, UUID): parties tablosuna referans.cooperative_id (FK, UUID): cooperatives tablosuna referans.share_count (INTEGER): Pay adedi.start_date (DATE): Ortaklık başlangıç tarihi.end_date (DATE): Ortaklık bitiş tarihi (varsa).is_active (BOOLEAN): Üyeliğin mevcut durumunu gösteren basit bir bayrak.membership_events: Olay kaynaklama modelinin merkezidir. Her bir satır, bir üyeliğin durumundaki bir değişikliği temsil eder.id (PK, UUID)membership_id (FK, UUID): memberships tablosuna referans.event_type (VARCHAR): Olayın türü ('JOINED', 'EXPELLED', 'DECEASED', 'TRANSFERRED_OUT', 'TRANSFERRED_IN', 'LEFT').event_date (DATE): Olayın gerçekleştiği tarih.notes (TEXT): Olayla ilgili açıklamalar.created_by_user_id (FK, UUID): İşlemi yapan kullanıcıya referans.Uydu Tablolar (expulsion_details, transfer_details, death_details): Bu tablolar, belirli olay türlerine özgü verileri depolamak için kullanılır ve membership_events tablosundaki bir kayda bire bir (one-to-one) ilişkiyle bağlanır.expulsion_details: "Ortak İhraç Durumu" ekranındaki tüm alanları içerir.1 Örneğin: first_warning_date, first_warning_number, board_decision_date, board_decision_number vb.transfer_details: "Ortaklığı Devretti" ve "Devraldı" durumları için gerekli bilgileri içerir.1 Örneğin: transfer_direction ('IN' veya 'OUT'), counterparty_membership_event_id (devir işleminin diğer tarafına referans).death_details: "Vefat Etti" durumu için date_of_death gibi alanları içerir.1Bu tasarım, tüm olası durum alanlarını tek bir geniş ve seyrek tabloya doldurmaktan kaçınarak 3NF'ye tam uyum sağlar. Her üyelik değişikliği, denetlenebilir ve eksiksiz bir tarihçe olarak kaydedilir. Bu, yasal ve düzenleyici uyumluluk için büyük bir avantajdır ve herhangi bir üyeliğin durumunu geçmişteki herhangi bir anda yeniden oluşturma yeteneği sunar.1.3. Yönetim Yapıları (Organlar)"Organlar" bölümü 1, bir kooperatifin üç ana yönetim kurulunu tanımlar: Yönetim Kurulu, Denetim Kurulu ve Tasfiye Kurulu. Üyelerin görev süreleri ve bu kurullardaki rolleri bulunmaktadır.Önerilen Tablolar:board_types: Farklı kurul türlerini tanımlayan bir arama tablosu.id (PK, UUID)name (VARCHAR, UNIQUE): 'Yönetim Kurulu', 'Denetim Kurulu', 'Tasfiye Kurulu'.boards: Bir kooperatif için belirli bir dönemdeki bir kurulun somut bir örneğini tanımlar.id (PK, UUID)cooperative_id (FK, UUID): cooperatives tablosuna referans.board_type_id (FK, UUID): board_types tablosuna referans.term_start_date (DATE): Kurulun görev döneminin başlangıcı.term_end_date (DATE): Kurulun görev döneminin sonu.board_memberships: Bir party'yi (Bölüm 1.2'deki kimlik modelinden) belirli bir board'a bağlar.id (PK, UUID)board_id (FK, UUID): boards tablosuna referans.party_id (FK, UUID): parties tablosuna referans.role_in_board (VARCHAR): Kurul içindeki rol (örneğin, 'Başkan', 'Üye', 'Yedek Üye').start_date (DATE): Üyenin göreve başlama tarihi.end_date (DATE): Üyenin görevden ayrılma tarihi.Bu tasarım, party_id'ye bağlanarak, bir kurul üyesinin sadece bir birey değil, aynı zamanda kooperatife üye olan bir tüzel kişiliğin temsilcisi olma olasılığını da zarif bir şekilde ele alır. Bu, Bölüm 1.2'de kurulan kimlik modelini yeniden kullanarak sistem genelinde tutarlılık sağlar.1.4. Dönemsel Finansal ve İdari Raporlama (İdari/Mali Durum)Bu bölüm 1, dönemsel finansal verilerin sunulması sürecini detaylandırır. Bu süreç, bir ana finansal özeti, gayrimenkul listelerini, yüklenen raporları ve iştirak şirketlerini içerir. Kritik bir işlevsellik, "Kaydet ve Bitir" butonudur. Bu buton, verileri kooperatif kullanıcısı için kilitler, durumu "Tamamlandı" olarak değiştirir ve Genel Kurul başvurusu yapabilmek için bir ön koşul oluşturur.1Bu iş akışını ve veri değişmezliği (immutability) gereksinimini modellemek için aşağıdaki yapı önerilmektedir:Önerilen Tablolar:fiscal_periods: Bu modülün ana tablosudur. Bir kooperatifin belirli bir mali dönemini temsil eder.id (PK, UUID)cooperative_id (FK, UUID): cooperatives tablosuna referans.start_date (DATE)end_date (DATE)status (VARCHAR): İş akışını yöneten anahtar sütun ('DRAFT', 'SUBMITTED', 'APPROVED').submitted_at (TIMESTAMPTZ): Beyanın tamamlandığı zaman.submitted_by_user_id (FK, UUID): Beyanı tamamlayan kullanıcıya referans.financial_summaries: fiscal_periods ile bire bir ilişkiye sahiptir ve özet alanları içerir.1fiscal_period_id (PK, FK, UUID)total_income (DECIMAL)total_expenses (DECIMAL)personnel_count (INTEGER)insurance_premium_paid (DECIMAL)real_estate_holdings: fiscal_periods ile bire çok (one-to-many) ilişkiye sahiptir ve "Gayrimenkul Ekle" ekranındaki tüm detaylı mülk niteliklerini saklar.1id (PK, UUID)fiscal_period_id (FK, UUID)property_type (VARCHAR): Cinsi (örneğin, 'Tarla', 'Arsa', 'Bina').address, city, district, sheet_no, parcel_no, area_sqm, estimated_value gibi detaylı alanlar.affiliate_participations: fiscal_periods ile bire çok ilişkiye sahiptir ve "İştirak Ekle" ekranındaki gibi diğer şirketlere yapılan yatırımların detaylarını saklar.1id (PK, UUID)fiscal_period_id (FK, UUID)affiliate_name (VARCHAR)mersis_no (VARCHAR)share_ratio (DECIMAL)capital_amount (DECIMAL)Bilanço, Gelir-Gider Tablosu gibi zorunlu raporlar, bir sonraki bölümde açıklanacak olan genel amaçlı belge yönetim sistemi tarafından ele alınacaktır.1.5. Genel Kurul ve Belge Yönetimi"Genel Kurul" bölümü 1, genel kurul toplantılarını ve toplantı sonrası yüklenmesi zorunlu olan Tutanak, Hazirun Listesi gibi belgeleri tanımlar. Belgeler ayrıca finansal raporlama bölümünde de yoğun olarak kullanılmaktadır.Her belge yükleme senaryosu için ayrı tablolar (financial_documents, meeting_documents) oluşturmak, tekrara dayalı ve kırılgan bir mimariye yol açar. Bunun yerine, tek ve sağlam bir belge yönetim alt sistemi kurmak çok daha üstün bir mimari seçimdir.Önerilen Tablolar:general_meetings: Her bir toplantının detaylarını saklar.id (PK, UUID)cooperative_id (FK, UUID)meeting_date (TIMESTAMPTZ)meeting_type (VARCHAR): 'ORDINARY', 'EXTRAORDINARY'.location (TEXT)agenda (TEXT)documents: Merkezi, genel amaçlı belge tablosu.id (PK, UUID)file_name (VARCHAR): Orijinal dosya adı.file_path (VARCHAR): Depolama yolunu (örneğin, S3 nesne anahtarı) tutar.mime_type (VARCHAR): Dosyanın MIME türü (örneğin, 'application/pdf').file_size_bytes (BIGINT): Dosya boyutu.uploaded_by_user_id (FK, UUID)created_at (TIMESTAMPTZ)document_types: Belgeleri kategorize etmek için bir arama tablosu.id (PK, UUID)name (VARCHAR, UNIQUE): 'Bilanço', 'Gelir-Gider Tablosu', 'Denetçi Raporu', 'Yönetim Kurulu Faaliyet Raporu', 'Genel Kurul Tutanağı', 'Hazirun Listesi'.is_mandatory_for_fiscal (BOOLEAN): Mali dönem beyanı için zorunlu olup olmadığını belirtir.is_mandatory_for_meeting (BOOLEAN): Genel kurul sonrası için zorunlu olup olmadığını belirtir.Bağlantı Tabloları: Belgeleri ilgili iş varlıklarına bağlamak için kullanılır.fiscal_period_documents: (fiscal_period_id, document_id, document_type_id)general_meeting_documents: (general_meeting_id, document_id, document_type_id)Bu genel amaçlı sistem, uygulama genelinde herhangi bir yere belge ekleme işlevselliği kazandırır ve gelecekte yeni belge türleri veya ilişkileri eklemeyi son derece kolaylaştırır. document_types tablosundaki is_mandatory bayrakları, uygulamanın "dört zorunlu belge" gibi iş kurallarını veritabanı seviyesinde tanımlamasına ve zorunlu kılmasına olanak tanır.1Bölüm 2: Bağlama Duyarlı Yetkilendirme ve Kullanıcı ŞemasıBu bölüm, kullanıcının en karmaşık teknik talebini doğrudan ele alır: token "claim"leri için kooperatif bazlı rollerin modellenmesi. Bu, bir kullanıcının sisteme giriş yaptığında, sadece kim olduğunun değil, aynı zamanda erişimi olan her bir kooperatif bağlamında ne yapmaya yetkili olduğunun da bilinmesini gerektirir.2.1. Temel Güvenlik TablolarıHerhangi bir yetkilendirme sisteminin temelini standart kullanıcı, rol ve izin tabloları oluşturur.Önerilen Tablolar:users: Standart kullanıcı tablosu.id (PK, UUID)email (VARCHAR, UNIQUE)password_hash (VARCHAR)full_name (VARCHAR)is_active (BOOLEAN)roles: Sistemdeki tüm olası rolleri tanımlayan global bir liste.id (PK, UUID)role_name (VARCHAR, UNIQUE): 'Cooperative Admin', 'Board Member', 'Accountant', 'Directorate Inspector', 'System Superuser'.permissions: Sistemde gerçekleştirilebilecek tüm olası eylemlerin ayrıntılı bir listesi.id (PK, UUID)permission_name (VARCHAR, UNIQUE): 'CREATE_MEMBER', 'SUBMIT_FISCAL_PERIOD', 'APPROVE_FISCAL_PERIOD', 'VIEW_ALL_COOPERATIVES'.role_permissions: roles ve permissions arasında çoktan çoğa (many-to-many) bir bağlantı tablosu.role_id (PK, FK)permission_id (PK, FK)2.2. Kooperatif Bazlı Erişim Kontrol ModeliÇözümün kalbi, bir kullanıcının rolüne bağlam sağlayan tek bir eşleme tablosunda yatmaktadır. Bir kullanıcı sadece bir 'Yönetici' değildir; belirli bir kooperatif için bir 'Yönetici'dir.Değerli Tablo: user_cooperative_rolesBu tablo, tüm güvenlik modelinin dayanak noktasıdır. Üç temel yabancı anahtar içerir: user_id, cooperative_id ve role_id.user_id (PK, FK, UUID): users tablosuna referans.cooperative_id (PK, FK, UUID): cooperatives tablosuna referans.role_id (FK, UUID): roles tablosuna referans.Kullanıcının "kooperatif bazlı rolleri claimlere eklicem" talebi, bu tablonun varlık nedenidir. Bu tablo, bir kullanıcının hangi kooperatifte hangi role sahip olduğunu net bir şekilde eşler. Tek bir kullanıcı bu tabloda birden fazla kayda sahip olabilir: Kooperatif A için 'Yönetim Kurulu Üyesi' rolü ve Kooperatif B için 'Muhasebeci' rolü gibi.Sistem genelinde geçerli olan roller (örneğin, bir bakanlık denetçisi veya sistem süper kullanıcısı) cooperative_id sütununun NULL olarak ayarlanmasıyla yönetilebilir. NULL bir cooperative_id, bu rol atamasının global bir kapsama sahip olduğunu ve belirli bir kooperatifle sınırlı olmadığını gösterir.2.3. Token "Claim"leri Oluşturma PlanıBu bölümde, şemanın JWT "claim"leri oluşturmak için nasıl kullanılacağına dair pratik ve uygulamaya yönelik bir kılavuz sunulmaktadır. Bir kullanıcı giriş yaptığında, arka uç (backend) aşağıdaki gibi bir sorgu çalıştırarak kullanıcının tüm yetkilerini toplayabilir:Örnek Pseudo-SQL Sorgusu:SQLSELECT
  u.id AS user_id,
  u.email,
  ucr.cooperative_id,
  r.role_name,
  array_agg(p.permission_name) AS permissions
FROM users u
JOIN user_cooperative_roles ucr ON u.id = ucr.user_id
JOIN roles r ON ucr.role_id = r.id
JOIN role_permissions rp ON r.id = rp.role_id
JOIN permissions p ON rp.permission_id = p.id
WHERE u.id = :current_user_id
GROUP BY u.id, u.email, ucr.cooperative_id, r.role_name;
Bu sorgunun çıktısı, JWT "claim" yüküne (payload) gömülmek için mükemmel olan yapılandırılmış bir JSON nesnesi oluşturmak üzere işlenebilir.Örnek JWT "Claim" Yapısı:JSON{
  "sub": "user_id_123",
  "email": "user@example.com",
  "cooperative_permissions": {
    "coop_id_abc": {
      "role": "Cooperative Admin",
      "permissions":
    },
    "coop_id_xyz": {
      "role": "Board Member",
      "permissions":
    }
  },
  "global_permissions":
}
Bu yapı, uygulamanın arka uç ara katman yazılımının (middleware) yetki kontrollerini son derece kolay bir şekilde yapmasını sağlar: "Kullanıcının coop_id_abc bağlamı için 'CREATE_MEMBER' izni var mı?" Bu yaklaşım, kullanıcının belirttiği karmaşık yetkilendirme gereksinimini doğrudan, verimli ve güvenli bir şekilde çözer.Bölüm 3: Tamamlanmış ve Sonlandırılmış ŞemalarBu bölümde, önceki bölümlerde detaylandırılan mimarinin doğrudan kullanıma hazır, somut çıktıları sunulmaktadır.3.1. dbdiagram.io Şema TanımıAşağıdaki kod, bu raporda açıklanan tüm tabloları, sütunları, veri türlerini ve ilişkileri içeren görsel bir şema oluşturmak için dbdiagram.io platformunda kullanılabilir.// --- Kooperatif Yönetim Sistemi Veritabanı Şeması ---

// --- Core Cooperative and Hierarchy ---

Table cooperatives {
  id uuid [pk]
  name varchar [not null]
  mersis_no varchar [unique, not null]
  file_no varchar
  registration_date date
  establishment_permit_date date
  legal_status varchar
  cooperative_type_id uuid [ref: > cooperative_types.id]
  parent_cooperative_id uuid [ref: > cooperatives.id]
  address_line1 varchar
  city varchar
  postal_code varchar
  created_at timestamptz [not null, default: `now()`]
  updated_at timestamptz [not null, default: `now()`]
}

Table cooperative_types {
  id uuid [pk]
  name varchar [unique, not null]
}

// --- Party & Membership Model (Polymorphic) ---

Table parties {
  id uuid [pk]
  party_type varchar
  created_at timestamptz [not null, default: `now()`]
}

Table persons {
  id uuid [pk, ref: > parties.id]
  first_name varchar [not null]
  last_name varchar [not null]
  tckn varchar [unique]
  date_of_birth date
  phone_number varchar
  email varchar [unique]
}

Table legal_entities {
  id uuid [pk, ref: > parties.id]
  name varchar [not null]
  tax_id varchar [unique]
  mersis_no varchar [unique]
  is_cooperative boolean [not null, default: false]
}

Table memberships {
  id uuid [pk]
  party_id uuid [not null, ref: > parties.id]
  cooperative_id uuid [not null, ref: > cooperatives.id]
  share_count integer [not null, default: 1]
  start_date date [not null]
  end_date date
  is_active boolean [not null, default: true]
  created_at timestamptz [not null, default: `now()`]
}

// --- Membership Event Sourcing ---

Table membership_events {
  id uuid [pk]
  membership_id uuid [not null, ref: > memberships.id]
  event_type varchar
  event_date date [not null]
  notes text
  created_by_user_id uuid [not null, ref: > users.id]
  created_at timestamptz [not null, default: `now()`]
}

Table expulsion_details {
  event_id uuid [pk, ref: > membership_events.id]
  reason text [not null]
  first_warning_date date
  first_warning_number varchar
  board_decision_date date [not null]
  board_decision_number varchar [not null]
}

Table transfer_details {
  event_id uuid [pk, ref: > membership_events.id]
  transfer_direction varchar
  counterparty_membership_event_id uuid [ref: > membership_events.id]
  board_decision_date date [not null]
  board_decision_number varchar [not null]
}

Table death_details {
  event_id uuid [pk, ref: > membership_events.id]
  date_of_death date [not null]
  board_decision_date date [not null]
  board_decision_number varchar [not null]
}


// --- Governance (Boards) ---

Table board_types {
  id uuid [pk]
  name varchar
}

Table boards {
  id uuid [pk]
  cooperative_id uuid [not null, ref: > cooperatives.id]
  board_type_id uuid [not null, ref: > board_types.id]
  term_start_date date [not null]
  term_end_date date
}

Table board_memberships {
  id uuid [pk]
  board_id uuid [not null, ref: > boards.id]
  party_id uuid [not null, ref: > parties.id]
  role_in_board varchar [not null, note: '"Chairman", "Member", "Alternate Member"']
  start_date date [not null]
  end_date date
}

// --- Financial Reporting ---

Table fiscal_periods {
  id uuid [pk]
  cooperative_id uuid [not null, ref: > cooperatives.id]
  start_date date [not null]
  end_date date [not null]
  status varchar
  submitted_at timestamptz
  submitted_by_user_id uuid [ref: > users.id]
  created_at timestamptz [not null, default: `now()`]
}

Table financial_summaries {
  fiscal_period_id uuid [pk, ref: > fiscal_periods.id]
  total_income decimal(15,2)
  total_expenses decimal(15,2)
  personnel_count integer
  insurance_premium_paid decimal(15,2)
}

Table real_estate_holdings {
  id uuid [pk]
  fiscal_period_id uuid [not null, ref: > fiscal_periods.id]
  property_type varchar
  address text
  city varchar
  district varchar
  sheet_no varchar
  parcel_no varchar
  area_sqm decimal(10,2)
  estimated_value decimal(15,2)
}

Table affiliate_participations {
  id uuid [pk]
  fiscal_period_id uuid [not null, ref: > fiscal_periods.id]
  affiliate_name varchar [not null]
  mersis_no varchar
  share_ratio decimal(5,2)
  capital_amount decimal(15,2)
}

// --- General Assembly & Document Management ---

Table general_meetings {
  id uuid [pk]
  cooperative_id uuid [not null, ref: > cooperatives.id]
  meeting_date timestamptz [not null]
  meeting_type varchar
  location text
  agenda text
}

Table documents {
  id uuid [pk]
  file_name varchar [not null]
  file_path varchar [not null, unique]
  mime_type varchar [not null]
  file_size_bytes bigint [not null]
  uploaded_by_user_id uuid [not null, ref: > users.id]
  created_at timestamptz [not null, default: `now()`]
}

Table document_types {
  id uuid [pk]
  name varchar [unique, not null]
  is_mandatory_for_fiscal boolean [not null, default: false]
  is_mandatory_for_meeting boolean [not null, default: false]
}

Table fiscal_period_documents {
  fiscal_period_id uuid [ref: > fiscal_periods.id]
  document_id uuid [ref: > documents.id]
  document_type_id uuid [ref: > document_types.id]
  primary key (fiscal_period_id, document_id)
}

Table general_meeting_documents {
  general_meeting_id uuid [ref: > general_meetings.id]
  document_id uuid [ref: > documents.id]
  document_type_id uuid [ref: > document_types.id]
  primary key (general_meeting_id, document_id)
}

// --- User, Roles & Permissions (Authorization) ---

Table users {
  id uuid [pk]
  email varchar [unique, not null]
  password_hash varchar [not null]
  full_name varchar
  is_active boolean [not null, default: true]
  created_at timestamptz [not null, default: `now()`]
}

Table roles {
  id uuid [pk]
  role_name varchar [unique, not null]
}

Table permissions {
  id uuid [pk]
  permission_name varchar [unique, not null]
}

Table role_permissions {
  role_id uuid [ref: > roles.id]
  permission_id uuid [ref: > permissions.id]
  primary key (role_id, permission_id)
}

Table user_cooperative_roles {
  user_id uuid [ref: > users.id]
  cooperative_id uuid [ref: > cooperatives.id]
  role_id uuid [not null, ref: > roles.id]
  primary key (user_id, cooperative_id)
}
3.2. PostgreSQL DDL Uygulama BetiğiAşağıdaki PostgreSQL betiği, veritabanını oluşturmak için gereken tüm CREATE TABLE ifadelerini, kısıtlamaları (constraints), yabancı anahtarları ve temel indeksleri içerir. Betik, doğrudan bir PostgreSQL istemcisinde çalıştırılmak üzere tasarlanmıştır ve her tablonun amacını açıklayan yorumlar içerir.SQL-- PostgreSQL DDL Script for Cooperative Management System
-- Version 1.0
-- This script is designed to be idempotent where possible.

CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- ========= USER, ROLES & PERMISSIONS (AUTHORIZATION) =========

-- Stores user accounts
CREATE TABLE IF NOT EXISTS users (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    email VARCHAR(255) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    full_name VARCHAR(255),
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Stores global role definitions
CREATE TABLE IF NOT EXISTS roles (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    role_name VARCHAR(100) UNIQUE NOT NULL
);

-- Stores granular action permissions
CREATE TABLE IF NOT EXISTS permissions (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    permission_name VARCHAR(100) UNIQUE NOT NULL
);

-- Maps permissions to roles
CREATE TABLE IF NOT EXISTS role_permissions (
    role_id UUID NOT NULL REFERENCES roles(id) ON DELETE CASCADE,
    permission_id UUID NOT NULL REFERENCES permissions(id) ON DELETE CASCADE,
    PRIMARY KEY (role_id, permission_id)
);

-- ========= CORE COOPERATIVE & HIERARCHY =========

-- Stores cooperative types (e.g., 'Building Cooperative')
CREATE TABLE IF NOT EXISTS cooperative_types (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name VARCHAR(255) UNIQUE NOT NULL
);

-- Central table for all cooperatives
CREATE TABLE IF NOT EXISTS cooperatives (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name VARCHAR(255) NOT NULL,
    mersis_no VARCHAR(50) UNIQUE NOT NULL,
    file_no VARCHAR(50),
    registration_date DATE,
    establishment_permit_date DATE,
    legal_status VARCHAR(100),
    cooperative_type_id UUID REFERENCES cooperative_types(id) ON DELETE SET NULL,
    parent_cooperative_id UUID REFERENCES cooperatives(id) ON DELETE SET NULL, -- Self-referencing for hierarchy
    address_line1 VARCHAR(255),
    city VARCHAR(100),
    postal_code VARCHAR(10),
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- ========= CONTEXTUAL AUTHORIZATION LINK =========

-- This is the key table linking users to cooperatives with specific roles.
-- A NULL cooperative_id implies a global role.
CREATE TABLE IF NOT EXISTS user_cooperative_roles (
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    cooperative_id UUID REFERENCES cooperatives(id) ON DELETE CASCADE,
    role_id UUID NOT NULL REFERENCES roles(id) ON DELETE CASCADE,
    PRIMARY KEY (user_id, cooperative_id)
);
-- A partial index to allow multiple global roles (cooperative_id IS NULL) for a single user.
CREATE UNIQUE INDEX IF NOT EXISTS user_cooperative_roles_user_coop_unique_idx ON user_cooperative_roles (user_id) WHERE cooperative_id IS NULL;


-- ========= PARTY & MEMBERSHIP MODEL (POLYMORPHIC) =========

-- Abstract base table for any entity that can be a member
CREATE TABLE IF NOT EXISTS parties (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    party_type VARCHAR(50) NOT NULL CHECK (party_type IN ('PERSON', 'LEGAL_ENTITY')),
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Stores details for natural persons
CREATE TABLE IF NOT EXISTS persons (
    id UUID PRIMARY KEY REFERENCES parties(id) ON DELETE CASCADE,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    tckn VARCHAR(11) UNIQUE,
    date_of_birth DATE,
    phone_number VARCHAR(20),
    email VARCHAR(255) UNIQUE
);

-- Stores details for legal entities (companies, other co-ops)
CREATE TABLE IF NOT EXISTS legal_entities (
    id UUID PRIMARY KEY REFERENCES parties(id) ON DELETE CASCADE,
    name VARCHAR(255) NOT NULL,
    tax_id VARCHAR(20) UNIQUE,
    mersis_no VARCHAR(50) UNIQUE,
    is_cooperative BOOLEAN NOT NULL DEFAULT FALSE
);

-- Represents the membership of a party in a cooperative
CREATE TABLE IF NOT EXISTS memberships (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    party_id UUID NOT NULL REFERENCES parties(id) ON DELETE RESTRICT,
    cooperative_id UUID NOT NULL REFERENCES cooperatives(id) ON DELETE RESTRICT,
    share_count INT NOT NULL DEFAULT 1 CHECK (share_count > 0),
    start_date DATE NOT NULL,
    end_date DATE,
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    UNIQUE (party_id, cooperative_id)
);

-- ========= MEMBERSHIP EVENT SOURCING =========

-- Records all state changes for a membership
CREATE TABLE IF NOT EXISTS membership_events (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    membership_id UUID NOT NULL REFERENCES memberships(id) ON DELETE CASCADE,
    event_type VARCHAR(50) NOT NULL,
    event_date DATE NOT NULL,
    notes TEXT,
    created_by_user_id UUID NOT NULL REFERENCES users(id),
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Satellite table for expulsion-specific data
CREATE TABLE IF NOT EXISTS expulsion_details (
    event_id UUID PRIMARY KEY REFERENCES membership_events(id) ON DELETE CASCADE,
    reason TEXT NOT NULL,
    first_warning_date DATE,
    first_warning_number VARCHAR(50),
    board_decision_date DATE NOT NULL,
    board_decision_number VARCHAR(50) NOT NULL
);

-- Satellite table for transfer-specific data
CREATE TABLE IF NOT EXISTS transfer_details (
    event_id UUID PRIMARY KEY REFERENCES membership_events(id) ON DELETE CASCADE,
    transfer_direction VARCHAR(10) NOT NULL CHECK (transfer_direction IN ('IN', 'OUT')),
    counterparty_membership_event_id UUID REFERENCES membership_events(id), -- Link to the other side of the transfer
    board_decision_date DATE NOT NULL,
    board_decision_number VARCHAR(50) NOT NULL
);

-- Satellite table for death-specific data
CREATE TABLE IF NOT EXISTS death_details (
    event_id UUID PRIMARY KEY REFERENCES membership_events(id) ON DELETE CASCADE,
    date_of_death DATE NOT NULL,
    board_decision_date DATE NOT NULL,
    board_decision_number VARCHAR(50) NOT NULL
);

-- ========= GOVERNANCE (BOARDS) =========

CREATE TABLE IF NOT EXISTS board_types (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name VARCHAR(100) UNIQUE NOT NULL -- 'Yönetim Kurulu', 'Denetim Kurulu', etc.
);

CREATE TABLE IF NOT EXISTS boards (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    cooperative_id UUID NOT NULL REFERENCES cooperatives(id) ON DELETE CASCADE,
    board_type_id UUID NOT NULL REFERENCES board_types(id) ON DELETE RESTRICT,
    term_start_date DATE NOT NULL,
    term_end_date DATE,
    UNIQUE(cooperative_id, board_type_id, term_start_date)
);

CREATE TABLE IF NOT EXISTS board_memberships (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    board_id UUID NOT NULL REFERENCES boards(id) ON DELETE CASCADE,
    party_id UUID NOT NULL REFERENCES parties(id) ON DELETE RESTRICT,
    role_in_board VARCHAR(100) NOT NULL, -- 'Chairman', 'Member', etc.
    start_date DATE NOT NULL,
    end_date DATE,
    UNIQUE(board_id, party_id)
);

-- ========= FINANCIAL REPORTING & DOCUMENT MANAGEMENT =========

CREATE TABLE IF NOT EXISTS fiscal_periods (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    cooperative_id UUID NOT NULL REFERENCES cooperatives(id) ON DELETE CASCADE,
    start_date DATE NOT NULL,
    end_date DATE NOT NULL,
    status VARCHAR(50) NOT NULL DEFAULT 'DRAFT' CHECK (status IN ('DRAFT', 'SUBMITTED', 'APPROVED')),
    submitted_at TIMESTAMPTZ,
    submitted_by_user_id UUID REFERENCES users(id),
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    UNIQUE(cooperative_id, start_date, end_date)
);

CREATE TABLE IF NOT EXISTS financial_summaries (
    fiscal_period_id UUID PRIMARY KEY REFERENCES fiscal_periods(id) ON DELETE CASCADE,
    total_income DECIMAL(15, 2),
    total_expenses DECIMAL(15, 2),
    personnel_count INT,
    insurance_premium_paid DECIMAL(15, 2)
);

CREATE TABLE IF NOT EXISTS real_estate_holdings (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    fiscal_period_id UUID NOT NULL REFERENCES fiscal_periods(id) ON DELETE CASCADE,
    property_type VARCHAR(100),
    address TEXT,
    city VARCHAR(100),
    district VARCHAR(100),
    sheet_no VARCHAR(50),
    parcel_no VARCHAR(50),
    area_sqm DECIMAL(10, 2),
    estimated_value DECIMAL(15, 2)
);

CREATE TABLE IF NOT EXISTS affiliate_participations (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    fiscal_period_id UUID NOT NULL REFERENCES fiscal_periods(id) ON DELETE CASCADE,
    affiliate_name VARCHAR(255) NOT NULL,
    mersis_no VARCHAR(50),
    share_ratio DECIMAL(5, 2),
    capital_amount DECIMAL(15, 2)
);

CREATE TABLE IF NOT EXISTS general_meetings (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    cooperative_id UUID NOT NULL REFERENCES cooperatives(id) ON DELETE CASCADE,
    meeting_date TIMESTAMPTZ NOT NULL,
    meeting_type VARCHAR(50) NOT NULL CHECK (meeting_type IN ('ORDINARY', 'EXTRAORDINARY')),
    location TEXT,
    agenda TEXT
);

CREATE TABLE IF NOT EXISTS documents (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    file_name VARCHAR(255) NOT NULL,
    file_path VARCHAR(512) NOT NULL UNIQUE,
    mime_type VARCHAR(100) NOT NULL,
    file_size_bytes BIGINT NOT NULL,
    uploaded_by_user_id UUID NOT NULL REFERENCES users(id),
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS document_types (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name VARCHAR(255) UNIQUE NOT NULL,
    is_mandatory_for_fiscal BOOLEAN NOT NULL DEFAULT FALSE,
    is_mandatory_for_meeting BOOLEAN NOT NULL DEFAULT FALSE
);

CREATE TABLE IF NOT EXISTS fiscal_period_documents (
    fiscal_period_id UUID NOT NULL REFERENCES fiscal_periods(id) ON DELETE CASCADE,
    document_id UUID NOT NULL REFERENCES documents(id) ON DELETE CASCADE,
    document_type_id UUID NOT NULL REFERENCES document_types(id) ON DELETE RESTRICT,
    PRIMARY KEY (fiscal_period_id, document_id)
);

CREATE TABLE IF NOT EXISTS general_meeting_documents (
    general_meeting_id UUID NOT NULL REFERENCES general_meetings(id) ON DELETE CASCADE,
    document_id UUID NOT NULL REFERENCES documents(id) ON DELETE CASCADE,
    document_type_id UUID NOT NULL REFERENCES document_types(id) ON DELETE RESTRICT,
    PRIMARY KEY (general_meeting_id, document_id)
);

-- Add indexes for foreign keys and frequently queried columns
CREATE INDEX IF NOT EXISTS idx_cooperatives_parent_id ON cooperatives(parent_cooperative_id);
CREATE INDEX IF NOT EXISTS idx_memberships_cooperative_id ON memberships(cooperative_id);
CREATE INDEX IF NOT EXISTS idx_memberships_party_id ON memberships(party_id);
CREATE INDEX IF NOT EXISTS idx_membership_events_membership_id ON membership_events(membership_id);
CREATE INDEX IF NOT EXISTS idx_fiscal_periods_cooperative_id ON fiscal_periods(cooperative_id);

--- END OF SCRIPT ---
Sonuç ve Stratejik ÖnerilerBu rapor, Kooperatif Yönetim Sistemi için sağlam, ölçeklenebilir ve güvenli bir temel oluşturan kapsamlı bir veritabanı mimarisi sunmuştur. Tasarım, veri bütünlüğünü sağlamak için Üçüncü Normal Form (3NF) ilkelerine sıkı sıkıya bağlı kalırken, aynı zamanda karmaşık iş gereksinimlerini karşılamak için modern veritabanı tasarım desenlerinden yararlanmaktadır.Benimsenen temel mimari desenler ve bunların sağladığı avantajlar şunlardır:Polimorfik Kimlik Modeli (parties): Gerçek ve tüzel kişileri tek bir soyut parties tablosu altında birleştirmek, üyelik ve yönetim kurulu gibi ilişkili sistemlerde kod tekrarını önler ve gelecekte yeni taraf türlerinin (örneğin, kamu kurumları) sisteme kolayca eklenmesine olanak tanır.Olay Kaynaklama (membership_events): Üyelik durumu değişikliklerini, her biri kendi verisine sahip denetlenebilir olaylar olarak modellemek, sistemin yasal ve düzenleyici gereksinimlere tam uyumlu olmasını sağlar. Bu yapı, basit bir durum sütununa kıyasla çok daha zengin bir tarihsel veri ve raporlama yeteneği sunar.Genel Amaçlı Belge Yönetimi (documents): Belge yönetimini merkezi ve yeniden kullanılabilir bir alt sistem olarak tasarlamak, mimariyi basitleştirir ve uygulamanın farklı bölümlerinde tutarlı bir işlevsellik sağlar.Bağlama Duyarlı Yetkilendirme (user_cooperative_roles): Kullanıcı rollerini kooperatif bağlamına oturtan bu merkezi tablo, sistemin en kritik teknik gereksinimini zarif ve etkili bir şekilde çözer. Bu yapı, uygulama katmanında karmaşık ve güvenli erişim kontrol politikalarının kolayca uygulanabilmesi için gerekli tüm bilgiyi sağlar.Bu sağlam temel üzerine inşa edilecek uygulama için aşağıdaki stratejik öneriler sunulmaktadır:İşlem (Transaction) Yönetimi: Ortak ihracı veya devri gibi birden çok tabloyu etkileyen karmaşık iş operasyonları, veritabanı seviyesinde tek bir atomik işlem (transaction) içinde sarmalanmalıdır. Bu, bir işlemin herhangi bir adımında hata olması durumunda tüm değişikliklerin geri alınmasını (rollback) sağlayarak veri tutarlılığını garanti eder.Gelişmiş İndeksleme Stratejileri: Sunulan temel indeksler başlangıç için yeterlidir. Ancak, sistem kullanıma alındıktan sonra, özellikle raporlama ve analiz sorgularının performansını artırmak için sık kullanılan filtreleme ve birleştirme (join) sütunları üzerinde birleşik (composite) ve kısmi (partial) indeksler oluşturulması düşünülmelidir. PostgreSQL'in EXPLAIN ANALYZE komutu, yavaş sorguları tespit etmek ve optimize etmek için kullanılmalıdır.Gelecekteki Gelişim: Mevcut mimari, gelecekteki genişlemeler için esnek bir zemin sunmaktadır. Yeni olay türleri (membership_events), yeni belge türleri (document_types) veya yeni kurul türleri (board_types) eklemek, mevcut yapıyı bozmadan sadece yeni kayıtlar ekleyerek veya küçük, izole tablolar oluşturarak gerçekleştirilebilir. Bu, sistemin zaman içinde organik olarak büyümesine olanak tanır.